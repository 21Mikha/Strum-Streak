using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using OpenTK.Input;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;

namespace OpenTK3_CLI_template
{
    internal class Window3D : GameWindow
    {
        private KeyboardState previousKeyboard;
        private MouseState previousMouse;
        private readonly Color DEFAULT_BKG_COLOR = Color.FromArgb(49, 50, 51);
        private Camera cam;

        private Tetrahedron tetrahedron;
        private List<Vector3> randomPoints;
        private Random random;
        private int generatedPointsCount = 0;
        private bool surfaceMode = false;
        private readonly Axes ax;

        public Window3D() : base(800, 800, new GraphicsMode(32, 24, 0, 8))
        {
            VSync = VSyncMode.On;
            random = new Random();
            randomPoints = new List<Vector3>();
            ax = new Axes();
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            GL.Enable(EnableCap.DepthTest);
            GL.DepthFunc(DepthFunction.Less);
            GL.ClearColor(DEFAULT_BKG_COLOR);

            cam = new Camera();
            tetrahedron = new Tetrahedron("E:\\OpenGLProjects\\TemeOpenGL\\SarhanM_temaCLI\\Tema2\\data.txt");
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            GL.Viewport(0, 0, Width, Height);

            Matrix4 perspective = Matrix4.CreatePerspectiveFieldOfView(MathHelper.PiOver4, Width / (float)Height, 1, 1024);
            GL.MatrixMode(MatrixMode.Projection);
            GL.LoadMatrix(ref perspective);
        }

        protected override void OnUpdateFrame(FrameEventArgs e)
        {
            base.OnUpdateFrame(e);

            KeyboardState currentKeyboard = Keyboard.GetState();
            MouseState currentMouse = Mouse.GetState();
            if (currentKeyboard[Key.Up])
            {
                Console.WriteLine("Changed size");
                tetrahedron.SetScale(tetrahedron.scale + 1f);
            }
                

            if (currentKeyboard[Key.Escape])
                Exit();

            if (currentKeyboard[Key.B] && !previousKeyboard[Key.B])
                ChangeBackgroundColor();

            if (currentKeyboard[Key.Z] && !previousKeyboard[Key.Z])
                tetrahedron.ChangeRandomFaceColor();

            if (currentKeyboard[Key.F] && !previousKeyboard[Key.F])
                surfaceMode = !surfaceMode;

            if (currentMouse[MouseButton.Right] && !previousMouse[MouseButton.Right])
                tetrahedron.MoveToRandomPosition();

            GenerateRandomPoints();

            previousKeyboard = currentKeyboard;
            previousMouse = currentMouse;
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);

            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            // Draw random points
            foreach (var point in randomPoints)
            DrawPoint(point);
            ax.Draw();
            // Draw tetrahedron
            tetrahedron.Draw(surfaceMode);

            SwapBuffers();
        }

        private void GenerateRandomPoints()
        {
            if (generatedPointsCount < 50)
            {
                Vector3 position = new Vector3(
                    random.Next(-50, 50),
                    random.Next(-50, 50),
                    random.Next(-50, 50)
                );
                Vector3 color = new Vector3(
                    random.Next(0, 256) / 255f,
                    random.Next(0, 256) / 255f,
                    random.Next(0, 256) / 255f
                );

                randomPoints.Add(position);
                generatedPointsCount++;

                if (generatedPointsCount == 50)
                    Console.WriteLine("Generated 50 random points.");
            }
        }

        private void ChangeBackgroundColor()
        {
            GL.ClearColor(new Color4(
                (float)random.NextDouble(),
                (float)random.NextDouble(),
                (float)random.NextDouble(),
                1.0f));
        }

        private void DrawPoint(Vector3 position)
        {
            GL.Begin(PrimitiveType.Points);
            GL.Vertex3(position);
            GL.End();
        }
        class Tetrahedron
        {
            private Vector3[] vertices;
            private Vector3[] colors;
            private Vector3 position;
            public float scale;
            public Tetrahedron(string filePath)
            {
                LoadFromFile(filePath);
                position = new Vector3(0, 0, -10f);
                scale = 1.0f;
            }
            public void SetScale(float newScale)
            {
                scale = newScale;
            }
            public void Draw(bool surfaceMode)
            {
                GL.PushMatrix();
                GL.Translate(position);
                GL.Scale(scale, scale, scale);
                GL.Rotate(45, 0.0f, 1.0f, 0.0f); // Rotate around Y-axis
                GL.Rotate(30, 1.0f, 0.0f, 0.0f); // Rotate around X-axis
                GL.Begin(surfaceMode ? PrimitiveType.Triangles : PrimitiveType.LineLoop);
                for (int i = 0; i < vertices.Length; i++)
                {
                    GL.Color3(colors[i]);
                    GL.Vertex3(vertices[i]);
                }
                GL.End();

                GL.PopMatrix();
            }

            public void MoveToRandomPosition()
            {
                Random random = new Random();
                position = new Vector3(
                    random.Next(-2, 2),
                    random.Next(-2, 2),
                    -10f
                );
            }

            public void ChangeRandomFaceColor()
            {
                Random random = new Random();
                int faceIndex = random.Next(0, colors.Length);
                colors[faceIndex] = new Vector3(
                    random.Next(0, 256) / 255f,
                    random.Next(0, 256) / 255f,
                    random.Next(0, 256) / 255f
                );
            }

            private void LoadFromFile(string filePath)
            {
                var lines = File.ReadAllLines(filePath);
                vertices = new Vector3[lines.Length];
                colors = new Vector3[lines.Length];

                for (int i = 0; i < lines.Length; i++)
                {
                    var parts = lines[i].Split();
                    vertices[i] = new Vector3(
                        float.Parse(parts[0]),
                        float.Parse(parts[1]),
                        float.Parse(parts[2])
                    );

                    // Validate and correct the color values
                    int r = int.Parse(parts[3]);
                    int g = int.Parse(parts[4]);
                    int b = int.Parse(parts[5]);

                    r = r < 0 ? 0 : r > 255 ? 255 : r;
                    g = g < 0 ? 0 : g > 255 ? 255 : g;
                    b = b < 0 ? 0 : b > 255 ? 255 : b;

                    colors[i] = new Vector3(
                        r / 255f,
                        g / 255f,
                        b / 255f
                    );
                }
            }

        }
    }
}
